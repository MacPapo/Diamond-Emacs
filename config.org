#+title: Diamong Config
#+author: Jacopo Costantini


* General Settings

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;; init.el --- Load the full configuration -*- lexical-binding: t -*-

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))

  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq inhibit-startup-screen t)

  (setq-default
   window-resize-pixelwise t
   frame-resize-pixelwise t)

  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))

  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  (setq initial-major-mode 'text-mode)
#+end_src

** GC Optimizations

#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*
  (defconst *is-a-mac* (eq system-type 'darwin))
  (setq package-enable-at-startup nil)

          ;;; Runtime optimizations
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
                bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  ;; (setq fast-but-imprecise-scrolling t)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  ;; This is further increased elsewhere, where needed (like our LSP module).
  (setq read-process-output-max (* 3 1024 1024)) ; 3 MiB


  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

          ;;; Disable UI elements early
  ;; PERF,UI: Doom strives to be keyboard-centric, so I consider these UI elements
  ;;   clutter. Initializing them also costs a morsel of startup time. Whats more,
  ;;   the menu bar exposes functionality that Doom doesn't endorse. Perhaps one
  ;;   day Doom will support these, but today is not that day.
  ;;
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because they do extra work to manipulate frame variables
  ;;   that isn't necessary this early in the startup process.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; And set these to nil so users don't have to toggle the modes twice to
  ;; reactivate them.
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)
  ;; FIX: On MacOS, disabling the menu bar makes MacOS treat Emacs as a
  ;;   non-application window -- which means it doesn't automatically capture
  ;;   focus when it is started, among other things, so enable the menu-bar for
  ;;   GUI frames, but keep it disabled in terminal frames because there it
  ;;   activates an ugly, in-frame menu bar.
  (when *is-a-mac*
    (add-hook 'window-setup-hook 'doom-restore-menu-bar-in-gui-frames-h)
    (add-hook 'after-make-frame-functions 'doom-restore-menu-bar-in-gui-frames-h)
    (defun doom-restore-menu-bar-in-gui-frames-h (&optional frame)
      (let ((use-frame (or frame (selected-frame))))
        (when (display-graphic-p use-frame)
          (set-frame-parameter use-frame 'menu-bar-lines 1)))))

      ;;; Encodings
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")

  (setq default-input-method nil)

  (setq garbage-collection-messages t)
  (let ((normal-gc-cons-threshold (* 100 1024 1024))  ; Set to 100MB
        (init-gc-cons-threshold (* 128 1024 1024)))   ; Set to 128MB
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
#+end_src

** Package manager configuration

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-pkgmanager.el
  ;; -*- lexical-binding: t; -*-
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (eval-when-compile
    (require 'use-package)
    (require 'straight)
    (setq straight-use-package-by-default t))

  (use-package diminish)

  (provide 'init-pkgmanager)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-pkgmanager)
#+end_src

** macOS

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-macos.el
  ;; -*- lexical-binding: t; -*-

  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)

    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))

    (use-package osx-trash
      :config
      (setq delete-by-moving-to-trash t)
      (osx-trash-setup))

    (use-package reveal-in-osx-finder
      :bind ("C-c z" . reveal-in-osx-finder)))

  (provide 'init-macos)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (when *is-a-mac*
    (require 'init-macos))
#+end_src

** User local preferences

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-local nil t)
#+end_src

** Appearance

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-theme.el
  ;; -*- lexical-binding: t; -*-

  (setq custom-safe-themes t)

  (use-package autothemer)

  (use-package zenburn-theme)

  (use-package sublime-themes)
  (use-package subatomic-theme)
  (use-package plan9-theme)

  ;; (load-theme 'spolsky t)
  ;; (load-theme 'modus-vivendi t)
  (load-theme 'plan9 t)
  ;; (load-theme 'subatomic t)

  (use-package pulsar
    :config
    (setq pulsar-pulse t
          ;; pulsar-face 'pulsar-yellow
          ;; pulsar-highlight-face 'pulsar-purple
          pulsar-delay 0.055)
    (add-to-list 'pulsar-pulse-functions 'ace-window)
    (pulsar-global-mode 1))

  (use-package display-time
    :straight nil
    :hook after-init
    :init
    (setq display-time-day-and-date t
          display-time-24hr-format  t
          display-time-default-load-average nil))

  (provide 'init-theme)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-theme)
#+end_src

** Editing Utils

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-editing-utils.el
  ;; -*- lexical-binding: t; -*-

  ;; NEW
  ;; | Key    | Command                               |
  ;; |--------+---------------------------------------|
  ;; | b      | popwin:popup-buffer                   |
  ;; | l      | popwin:popup-last-buffer              |
  ;; | o      | popwin:display-buffer                 |
  ;; | C-b    | popwin:switch-to-last-buffer          |
  ;; | C-p    | popwin:original-pop-to-last-buffer    |
  ;; | C-o    | popwin:original-display-last-buffer   |
  ;; | SPC    | popwin:select-popup-window            |
  ;; | s      | popwin:stick-popup-window             |
  ;; | 0      | popwin:close-popup-window             |
  ;; | f, C-f | popwin:find-file                      |
  ;; | e      | popwin:messages                       |
  ;; | C-u    | popwin:universal-display              |
  ;; | 1      | popwin:one-window                     |
  (use-package popwin
    :config
    (global-set-key (kbd "C-z") popwin:keymap)
    (popwin-mode t))

  ;; (use-package eros
  ;;   :config (eros-mode t))

  (use-package markdown-mode
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))

  (use-package vundo)

  (use-package minions
    :config (minions-mode 1))

  (use-package move-dup
    :bind (("M-<up>"     . move-dup-move-lines-up)
           ("M-<down>"   . move-dup-move-lines-down)
           ("C-M-<up>"   . move-dup-duplicate-up)
           ("C-M-<down>" . move-dup-duplicate-down)))

  (use-package emacs-surround
    :straight (:host github :repo "ganmacs/emacs-surround" :branch "master")
    :bind ("C-q" . emacs-surround))

  ;; (use-package doom-modeline
  ;;   :ensure t
  ;;   :config (doom-modeline-mode 1)
  ;;   :custom
  ;;   ((doom-modeline-buffer-encoding nil)
  ;;    (doom-modeline-minor-modes t)
  ;;    (doom-modeline-gnus-timer nil)
  ;;    (doom-modeline-bar-width 3)
  ;;    (doom-modeline-icon (unless (daemonp) t))))

  (use-package nerd-icons
    :custom
    (nerd-icons-font-family "Symbols Nerd Font Mono"))
  ;; END NEW

  (use-package electric-pair
    :straight nil
    :hook after-init)

  (use-package electric-indent
    :straight nil
    :hook after-init)

  (setq-default
   blink-cursor-interval 0.4
   bookmark-default-file (locate-user-emacs-file ".bookmarks.el")
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil
   create-lockfiles nil
   auto-save-default nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil
   visible-bell t
   use-short-answers t
   kill-do-not-save-duplicates t
   echo-keystrokes 0.02
   truncate-partial-width-windows nil)

  (use-package delete-selection
    :straight nil
    :hook after-init)

  (use-package hippie-expand
    :straight nil
    :bind ("M-/" . hippie-expand)
    :config
    (setq hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill)))

  (use-package global-auto-revert
    :diminish auto-revert
    :straight nil
    :hook after-init
    :config
    (setq global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))

  (use-package uniquify
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'reverse
          uniquify-separator " • "
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re "^\\*"))

  (use-package transient-mark
    :straight nil
    :hook after-init)

  (use-package subword
    :diminish subword
    :straight nil
    :hook after-init)

  (use-package display-line-numbers
    :straight nil
    :hook prog-mode
    :config
    (setq-default display-line-numbers-width 3))

  (use-package display-fill-column-indicator
    :straight nil
    :hook prog-mode
    :config
    (setq-default indicate-buffer-boundaries 'left
                  display-fill-column-indicator-character ?\u254e))

  (use-package show-paren
    :straight nil
    :hook after-init)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (use-package avy
    :bind (("C-:"   . avy-goto-char)
           ("C-'"   . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0)
           ("M-Z"   . zap-up-to-char))
    :config
    (setq avy-background t)
    (setq avy-style 'at-full))

  (use-package origami
    :hook prog-mode
    :bind (("C-c f" . origami-recursively-toggle-node)
           ("C-c F" . origami-toggle-all-nodes)))

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))

  (use-package ace-mc
    :bind (("C-c M-j" . ace-mc-add-multiple-cursors)
           ("C-c M-k" . ace-mc-add-single-cursor)))

  (global-unset-key [M-left])
  (global-unset-key [M-right])

  (use-package whole-line-or-region
    :demand t
    :diminish whole-line-or-region-local-mode)

  (global-set-key (kbd "M-j") 'join-line)

  (use-package anzu
    :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
           ([remap query-replace]        . anzu-query-replace)
           ("C-c a r"                    . anzu-query-replace-at-cursor)
           :map isearch-mode-map
           ([remap isearch-delete-char]  . isearch-del-char))
    :init
    (global-anzu-mode +1))

  (use-package highlight-escape-sequences
    :init
    (add-hook 'after-init-hook 'hes-mode))

  (use-package recentf
    :straight nil
    :hook after-init
    :config
    (setq-default
     recentf-max-saved-items 1000
     recentf-exclude `("/tmp/" "/ssh:" ,(concat package-user-dir "/.*-autoloads\\.el\\'"))))

  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))

  (use-package shfmt)

  (use-package dotenv-mode)

  (use-package solaire-mode
    :config
    (solaire-global-mode +1))

  (use-package crux
    :bind
    ([remap move-beginning-of-line] . crux-move-beginning-of-line)
    ([remap kill-whole-line]        . crux-kill-whole-line)
    ("C-<backspace>"                . crux-kill-line-backwards)
    ("C-S-o"                        . crux-smart-open-line-above)
    ("C-o"                          . crux-smart-open-line)
    ("C-c n"                        . crux-cleanup-buffer-or-region)
    ("C-c d"                        . crux-duplicate-current-line-or-region)
    ("C-c M-d"                      . crux-duplicate-and-comment-current-line-or-region)
    ("C-c r"                        . crux-rename-file-and-buffer)
    ("C-x C-u"                      . crux-upcase-region)
    ("C-x C-l"                      . crux-downcase-region)
    ("C-x M-c"                      . crux-capitalize-region)
    ("M-j"                          . crux-top-join-line))

  (use-package rainbow-delimiters
    :hook prog-mode)

  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))

  ;; (use-package whitespace
  ;;   :straight nil  ; Non è necessario assicurarsi che sia installato perché fa parte di Emacs
  ;;   :hook ((prog-mode . whitespace-mode)  ; Attiva whitespace-mode per i file di codice sorgente
  ;;          (text-mode . whitespace-mode))  ; e per i file di testo
  ;;   :config
  ;;   ;; Definisci i tipi di spazi bianchi da evidenziare
  ;;   (setq whitespace-style '(face
  ;;                            tabs
  ;;                            spaces
  ;;                            trailing
  ;;                            lines
  ;;                            space-before-tab
  ;;                            newline
  ;;                            indentation
  ;;                            empty
  ;;                            space-after-tab
  ;;                            space-mark
  ;;                            tab-mark
  ;;                            newline-mark))

  ;;   ;; Puoi personalizzare ulteriormente l'aspetto degli spazi bianchi qui (se necessario)
  ;;   (setq whitespace-display-mappings
  ;;         ;; all numbers are Unicode codepoint in decimal. try (insert-char 182 ) to see it
  ;;         '((space-mark 32 [183] [46]) ; 32 SPACE, 183 MIDDLE DOT 「·」, 46 FULL STOP 「.」
  ;;           (newline-mark 10 [182 10]) ; 10 LINE FEED
  ;;           (tab-mark 9 [9655 9] [92 9]) ; 9 TAB, 9655 WHITE RIGHT-POINTING TRIANGLE 「▷」
  ;;           ))
  ;;   ;; Configura i colori degli spazi bianchi
  ;;   (set-face-attribute 'whitespace-space nil :foreground "gray80")
  ;;   (set-face-attribute 'whitespace-tab nil :foreground "gray80")
  ;;   (set-face-attribute 'whitespace-newline nil :foreground "gray80")

  ;;   ;; Personalizza la lunghezza massima della riga (se desideri che `whitespace-mode` ti avvisi riguardo righe troppo lunghe)
  ;;   (setq whitespace-line-column 80))


  ;; Default of 800 was too low.
  ;; Avoid Lisp nesting exceeding in swift-mode.
  (setq max-lisp-eval-depth 10000)

  (provide 'init-editing-utils)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-editing-utils)
#+end_src

** Treesitter

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-treesitter.el
  ;; -*- lexical-binding: t; -*-

  ;; (setq treesit-language-source-alist
  ;;       '((bash "https://github.com/tree-sitter/tree-sitter-bash")
  ;;         (c "https://github.com/tree-sitter/tree-sitter-c")
  ;;         (ruby "https://github.com/tree-sitter/tree-sitter-ruby.git")
  ;;         (cmake "https://github.com/uyha/tree-sitter-cmake")
  ;;         (common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
  ;;         (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
  ;;         (css "https://github.com/tree-sitter/tree-sitter-css")
  ;;         (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
  ;;         (elisp "https://github.com/Wilfred/tree-sitter-elisp")
  ;;         (go "https://github.com/tree-sitter/tree-sitter-go")
  ;;         (go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
  ;;         (html "https://github.com/tree-sitter/tree-sitter-html")
  ;;         (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
  ;;         (json "https://github.com/tree-sitter/tree-sitter-json")
  ;;         (lua "https://github.com/Azganoth/tree-sitter-lua")
  ;;         (make "https://github.com/alemuller/tree-sitter-make")
  ;;         (markdown "https://github.com/ikatyang/tree-sitter-markdown")
  ;;         (python "https://github.com/tree-sitter/tree-sitter-python")
  ;;         (r "https://github.com/r-lib/tree-sitter-r")
  ;;         (rust "https://github.com/tree-sitter/tree-sitter-rust")
  ;;         (toml "https://github.com/tree-sitter/tree-sitter-toml")
  ;;         (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
  ;;         (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
  ;;         (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (setq treesit-load-name-override-list nil
        treesit-font-lock-level 4)

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))

  (provide 'init-treesitter)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
 ;; (require 'init-treesitter)
#+end_src

** Flymake Flycheck

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-flymake.el
  ;; -*- lexical-binding: t; -*-

  (use-package flymake-flycheck
    :bind (:map flymake-mode-map
                ("C-c ! l" . flymake-show-buffer-diagnostics)
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! c" . flymake-start))
    :hook ((prog-mode     . flymake-mode)
           (text-mode     . flymake-mode)
           (flymake-mode  . (lambda ()
                              (setq-local flymake-diagnostic-functions
                                          (append flymake-diagnostic-functions
                                                  (flymake-flycheck-all-chained-diagnostic-functions)))))
           (flycheck-mode . (lambda ()
                              (setq-default flycheck-disabled-checkers
                                            (append (default-value 'flycheck-disabled-checkers)
                                                    '(emacs-lisp emacs-lisp-checkdoc emacs-lisp-package))))))
    :config
    (setq flymake-proc-allowed-file-name-masks nil))

  (provide 'init-flymake)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-flymake)
#+end_src

** Tramp

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-tramp.el
  ;; -*- lexical-binding: t; -*-

  (use-package tramp
    :straight nil
    :config
    (setq remote-file-name-inhibit-cache nil
          tramp-verbose 6
          tramp-inline-compress-start-size 1000000
          tramp-default-method "ssh"))

  (provide 'init-tramp)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-tramp)
#+end_src


** Shell

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-shell.el
  ;; -*- lexical-binding: t; -*-

  (use-package vterm
    :bind ("C-c t V" . vterm))

  (use-package vterm-toggle
    :bind ("C-c t v" . vterm-toggle))

  (use-package eshell
    :straight nil
    :bind ("C-c t E" . eshell))

  (use-package eshell-toggle
    :bind ("C-c t e" . eshell-toggle))

  (use-package eshell-prompt-extras
    :init
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-lambda "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
            eshell-prompt-function 'epe-theme-lambda)))

  (use-package eshell-syntax-highlighting
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (provide 'init-shell)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-shell)
#+end_src

* Packages

** Dired

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-dired.el
  ;; -*- lexical-binding: t; -*-

  (require 'dired)
  (setq-default dired-dwim-target t)

  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package diredfl
    :config
    (diredfl-global-mode 1))

  (use-package dired-recent
    :init
    (dired-recent-mode 1))

  (use-package dired-hacks-utils
    :bind (:map dired-mode-map
                ("M-n" . dired-hacks-next-file)
                ("M-p" . dired-hacks-previous-file)))

  (use-package dired-filter
    :bind (:map dired-mode-map
                ("/" . dired-filter-mode)))

  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove)))

  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("s" . dired-narrow))
    :config
    (setq dired-narrow-exit-when-1-left nil))

  (provide 'init-dired)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-dired)
#+end_src

** Vertico Completion

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-vertico.el
  ;; -*- lexical-binding: t; -*-
  (use-package vertico
    :hook ((after-init . vertico-mode)
           (rfn-eshadow-update-overlay . vertico-directory-tidy)
           (minibuffer-setup . vertico-repeat-save)
           (minibuffer-setup . cursor-intangible-mode))
    :bind (:map vertico-map
                ("DEL" . vertico-directory-delete-char)
                ("?"   . minibuffer-completion-help))
    :init
    (defun crm-indicator (args)
      (cons (format "[CRM%s] %s"
                    (replace-regexp-in-string
                     "\\`\\[.*?]\\*\\|\\[.*?]\\*\\'" ""
                     crm-separator)
                    (car args))
            (cdr args)))
    (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
    (setq minibuffer-prompt-properties
          '(read-only t cursor-intangible t face minibuffer-prompt))
    (setq enable-recursive-minibuffers t)
    :config
    (setq vertico-resize nil
          vertico-count 17
          vertico-cycle t)
    (setq-default completion-in-region-function
                  (lambda (&rest args)
                    (apply (if vertico-mode
                               #'consult-completion-in-region
                             #'completion--in-region)
                           args))))
  (use-package orderless
    :init
    ;; Configure a custom style dispatcher (see the Consult wiki)
    ;; (setq orderless-style-dispatchers '(+orderless-consult-dispatch orderless-affix-dispatch)
    ;;       orderless-component-separator #'orderless-escapable-split-on-space)
    (setq completion-styles '(orderless basic)
          completion-category-defaults nil
          completion-category-overrides '((file (styles partial-completion)))))

  (use-package savehist
    :straight nil
    :hook after-init)

  (use-package consult
    :defer t
    :bind
    (([remap bookmark-jump] . consult-bookmark)
     ([remap goto-line] . consult-goto-line)
     ([remap imenu] . consult-imenu)
     ([remap Info-search] . consult-info)
     ([remap locate] . consult-locate)
     ([remap load-theme] . consult-theme)
     ([remap man] . consult-man)
     ([remap recentf-open-files] . consult-recent-file)
     ([remap switch-to-buffer] . consult-buffer)
     ([remap yank-pop] . consult-yank-pop)
     ("C-h D t" . consult-theme)
     ("M-g M-g" . consult-line)
     ("M-g M-m" . consult-line-multi)
     ("C-x M-f" . consult-fd)
     ("C-c ! j" . consult-flymake)
     ("C-c o"   . consult-outline)
     ("C-c M-r" . consult-ripgrep)
     :map org-mode-map
     ("C-c o" . consult-org-heading))
    :config
    (setq consult-line-numbers-widen t
          consult-async-min-input 2
          consult-async-refresh-delay  0.15
          consult-async-input-throttle 0.2
          consult-async-input-debounce 0.1)
    )

  (use-package consult-dir
    :bind (([remap list-directory] . consult-dir)
           :map vertico-map
           ("C-x C-d" . consult-dir)
           ("C-x C-j" . consult-dir-jump-file)))

  (use-package consult-flycheck
    :after (consult flycheck))

  (use-package embark
    :defer t
    :init
    (setq which-key-use-C-h-commands nil
          prefix-help-command #'embark-prefix-help-command)
    :bind (
           ([remap describe-bindings] . embark-bindings)
           ("C-;" . embark-act)
           :map minibuffer-local-map
           ("C-;" . embark-act)
           ("C-c C-;" . embark-export)
           ("C-c C-l" . embark-collect)))

  (use-package embark-consult
    :after (embark consult))

  (use-package marginalia
    :init
    (marginalia-mode)
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle)))

  (provide 'init-vertico)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-vertico)
#+end_src

** Projectile

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-projectile.el
  ;; -*- lexical-binding: t; -*-

  (use-package projectile
    :defer 5
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-indexing-method                'alien
          projectile-sort-order                     'modification-time
          projectile-enable-caching                 t
          projectile-per-project-compilation-buffer t
          projectile-mode-line-function             '(lambda ()
                                                       (format " Proj[%s]"
                                                               (projectile-project-name))))
    (projectile-mode +1))

  (use-package projectile-git-autofetch
    :diminish projectile-git-autofetch-mode
    :config
    (projectile-git-autofetch-mode 1))

  (use-package ibuffer
    :straight nil
    :bind (("C-x C-b" . ibuffer)))

  (use-package ibuffer-projectile)

  (provide 'init-projectile)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-projectile)
#+end_src

** Grep

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-grep.el
  ;; -*- lexical-binding: t; -*-

  (setq-default grep-highlight-matches t
                grep-scroll-output t)

  (when *is-a-mac*
    (setq-default locate-command "mdfind"))

  (use-package ripgrep)

  (use-package wgrep
    :commands wgrep-change-to-wgrep-mode
    :config (setq wgrep-auto-save-buffer t))

  (provide 'init-grep)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-grep)
#+end_src

** Copilot

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-copilot.el
  ;; -*- lexical-binding: t; -*-

  (use-package copilot
    :straight (:host github :repo "zerolfx/copilot.el" :files ("dist" "*.el"))
    :hook prog-mode
    :bind (("C-TAB"    . copilot-accept-completion)
           ("C-<tab>"  . copilot-accept-completion))
    :config
    (setq copilot-idle-delay 1))

  (provide 'init-copilot)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-copilot)
#+end_src


** Corfu

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-corfu.el
  ;; -*- lexical-binding: t; -*-

  (use-package corfu
    :hook
    ((shell-mode  . (lambda () (setq-local corfu-auto nil)))
     (eshell-mode . (lambda () (setq-local corfu-auto nil)))
     (term-mode   . (lambda () (setq-local corfu-auto nil)))
     (after-init  . global-corfu-mode))
    :custom
    (corfu-cycle t)
    (corfu-auto t)
    (corfu-commit-predicate nil)
    (corfu-quit-no-match t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)
    :bind (:map corfu-map
                ("TAB" . corfu-insert)
                ([tab] . corfu-insert))

    (provide 'init-corfu)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;(require 'init-corfu)
#+end_src

** Company

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-company.el
  ;; -*- lexical-binding: t; -*-

  (use-package company
    :hook ((prog-mode . (lambda ()
                          (setq-local company-backends
                                      '((company-capf :with company-yasnippet)))
                          (company-mode)))
           (text-mode . (lambda ()
                          (setq-local company-backends
                                      '((company-dabbrev company-ispell :separate)
                                        company-files))
                          (company-mode))))
    :config
    (setq company-tooltip-align-annotations t
          company-selection-wrap-around t
          company-lighter-base "©"
          company-tooltip-limit 14
          company-idle-delay 0.05 ;; correggimi
          company-minimum-prefix-length 2
          company-require-match 'never
          ;; company-format-margin-function 'company-text-icons-margin
          company-tooltip-minimum 4
          ;; company-text-face-extra-attributes '(:weight bold :slant italic)
          ;; company-text-icons-add-background t
          company-auto-commit nil
          company-dabbrev-other-buffers nil
          company-dabbrev-ignore-case nil
          company-dabbrev-downcase nil
          company-tooltip-flip-when-above t
          company-show-quick-access 'left
          company-backends '(company-capf)
          company-frontends '(company-pseudo-tooltip-frontend
                              company-echo-metadata-frontend)
          company-files-exclusions '(".git/" ".DS_Store")
          company-transformers '(delete-consecutive-dups
                                 company-sort-by-occurrence)
          company-global-modes '(not erc-mode message-mode help-mode eshell-mode))
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)))

  (use-package company-box
    :hook company-mode
    :config
    (setq company-box-show-single-candidate t
          company-box-backends-colors nil
          company-box-tooltip-limit 50))

  (provide 'init-company)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-company)
#+end_src


** Eglot

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-eglot.el
  ;; -*- lexical-binding: t; -*-

  (require 'eglot)

  (provide 'init-eglot)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;(require 'init-eglot)
#+end_src

** LSP Mode

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-lsp.el
  ;; -*- lexical-binding: t; -*-

  (use-package lsp-mode
    :commands lsp
    :hook ((c-ts-mode    . lsp)
           (c++-ts-mode  . lsp)
           (ruby-mode . lsp)
           (lsp-mode  . lsp-enable-which-key-integration))
    :config
    (setq lsp-log-io nil
          lsp-idle-delay 0.1))

  (use-package lsp-java
    :hook ((java-ts-mode . lsp)))

  (use-package lsp-dart
    :hook (dart-mode . lsp)
    :config
    (setq lsp-dart-sdk-dir "/opt/homebrew/Caskroom/flutter/3.13.6/flutter")
    (dap-register-debug-template "Flutter :: Custom debug"
                                 (list :flutterPlatform "arm64"
                                       :program "lib/main.dart"
                                       :args '("--flavor" "customer_a"))))

  (use-package lsp-treemacs
    :after lsp-mode treemacs
    :config
    (lsp-treemacs-sync-mode 1))

  (use-package treemacs
    :defer t
    :bind (([f8] . treemacs)
           ([f9] . treemacs-select-window))
    :config
    (progn
      (setq treemacs-is-never-other-window t)
      (setq treemacs-git-mode 'extended)))

  (use-package treemacs-projectile
    :after treemacs projectile)

  (use-package treemacs-magit
    :after treemacs magit)

  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode))

  (provide 'init-lsp)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-lsp)
#+end_src

** Windows

Ace Window Config
Remember:
x - delete window
m - swap windows
M - move window
c - copy window
j - select buffer
n - select the previous window
u - select buffer in the other window
c - split window fairly, either vertically or horizontally
v - split window vertically
b - split window horizontally
o - maximize current window
? - show these command bindings

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-windows.el
  ;; -*- lexical-binding: t; -*-

  (use-package winner-mode
    :straight nil
    :hook after-init)

  (use-package ace-window
    :bind ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (provide 'init-windows)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-windows)
#+end_src

** Git

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-git.el
  ;; -*- lexical-binding: t; -*-

  (use-package git-modes)

  (use-package git-timemachine
    :bind ("C-x v t" . git-timemachine-toggle))

  (use-package magit
    :bind
    (([(meta f12)] . magit-status)
     ("C-x g"      . magit-status)
     ("C-x M-g"    . magit-dispatch))
    :hook (magit-mode . (lambda () (local-unset-key [(meta h)])))
    :config
    (setq-default magit-diff-refine-hunk 'all))

  (use-package forge
    :after magit)

  (use-package diff-hl
    :hook ((dired-mode         . diff-hl-dired-mode)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (after-init         . global-diff-hl-mode))
    :bind (:map diff-hl-mode-map
                ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk)))

  (provide 'init-git)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-git)
#+end_src

** ORG MODE

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-org.el
  ;; -*- lexical-binding: t; -*-

  (use-package org
    :config
    (setq org-latex-src-block-backend 'minted)

    (add-to-list 'org-latex-packages-alist '("" "minted"))

    (setq org-latex-pdf-process
          '("pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f"
            "pdflatex -shell-escape -interaction nonstopmode -output-directory %o %f")))

  (use-package org-wc
    :after org)

  (use-package olivetti)

  (use-package org-pomodoro
    :after org)

  (use-package org-zettelkasten
    :hook org-mode)

  (use-package org-super-agenda
    :after org-agenda
    :config
    (setq org-agenda-files '("~/org/agenda/agenda.org"
                             "~/org/agenda/sessione.org"))
    (setq org-super-agenda-groups
          '((:name "Oggi"
                   :time-grid t
                   :scheduled today)
            (:name "Importante"
                   :priority "A")))
    (org-super-agenda-mode))

  (provide 'init-org)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-org)
#+end_src

** Docker

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-docker.el
  ;; -*- lexical-binding: t; -*-

  (use-package docker)

  (use-package docker-compose-mode)

  (use-package dockerfile-mode
    :config
    (put 'dockerfile-image-name 'safe-local-variable #'stringp))

  (provide 'init-docker)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-docker)
#+end_src

** Yasnippet

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-yasnippet.el
  ;; -*- lexical-binding: t; -*-

  (use-package yasnippet
    :defer 5
    :diminish yasnippet
    :bind (:map  yas-minor-mode-map
                 ("<backtab>" . yas-expand))
    :config
    ;;(setq yas-snippet-dirs '("~/.emacs.d/personal-snippets"))
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)

  (provide 'init-yasnippet)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-yasnippet)
#+end_src

* Languages

** Dart

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-dart.el
  ;; -*- lexical-binding: t; -*-

  (use-package dart-mode
    :bind (:map dart-mode-map
                ("C-M-x" . flutter-run-or-hot-reload)))

  (use-package flutter
    :config
    (setq flutter-sdk-path "/opt/homebrew/Caskroom/flutter/3.13.6/flutter/"))

  (provide 'init-dart)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-dart)
#+end_src

** C/C++

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-cxx.el
  ;; -*- lexical-binding: t; -*-

  (setq c-ts-mode-indent-offset 4)

  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))

  (use-package disaster)

  (use-package cmake-mode)

  (use-package flycheck-clang-analyzer
    :hook (c++-ts-mode . (lambda () (setq flycheck-clang-language-standard "c++17")))
    :config (flycheck-clang-analyzer-setup))

  (provide 'init-cxx)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-cxx)
#+end_src

** Java

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-java.el
  ;; -*- lexical-binding: t; -*-

  (setq java-ts-mode-indent-offset 8)

  (provide 'init-java)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-java)
#+end_src

** Go

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-go.el
  ;; -*- lexical-binding: t; -*-

  (use-package go-mode
    :mode ("\\.go\\'" . go-mode))

  (provide 'init-go)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-go)
#+end_src

** Ruby

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-ruby.el
  ;; -*- lexical-binding: t; -*-

  (use-package rbenv
    :config
    (setq rbenv-executable "/opt/homebrew/bin/rbenv"
          rbenv-binary-paths '((shims-path . "~/.rbenv/shims")
                               (bin-path . "/opt/homebrew/bin/rbenv")))
    (global-rbenv-mode))

  ;; (use-package rvm
  ;;   :config
  ;;   (rvm-use-default))

  (use-package inf-ruby
    :hook (ruby-mode . inf-ruby-minor-mode))

  (use-package robe
    :hook ruby-mode
    :config
    (eval-after-load 'company
      '(push 'company-robe company-backends)))

  (use-package bundler
    :after ruby-mode)

  (use-package rspec-mode
    :hook ruby-mode
    :config
    (setq rspec-use-rake-when-possible nil))

  (use-package yari
    :bind (:map ruby-mode-map
                ("C-c k" . yari))
    :after ruby-mode)

  (provide 'init-ruby)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-ruby)
#+end_src

** Common lisp

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-clisp.el
  ;; -*- lexical-binding: t; -*-

  (use-package slime
    :config
    (setq inferior-lisp-program "/opt/homebrew/bin/sbcl"))

  (provide 'init-clisp)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-clisp)
#+end_src

* Custom

** Autotangle

#+begin_src elisp :tangle ~/.emacs.d/lisp/auto-tangle.el
  ;; -*- lexical-binding: t; -*-

  (require 'ob-tangle)

  (defun tangle-config ()
    "Automatically tangle `config.org`, delete old .elc files, and byte-compile."
    (when (string= (buffer-file-name)
		   (expand-file-name (concat user-emacs-directory
					     "config.org")))
      (org-babel-tangle)
      ;; (let ((tangled-files (org-babel-tangle)))
      ;;   (dolist (file tangled-files)
      ;;     (let ((elc-file (concat file "c")))
      ;;       (when (file-exists-p elc-file)
      ;;         (delete-file elc-file))
      ;;       ;; Do not byte-compile init.el and early-init.el
      ;;       (unless (or (string= (file-name-nondirectory file) "init.el")
      ;;                   (string= (file-name-nondirectory file) "early-init.el"))

      ;;         (byte-compile-file file)))))
      ))

  (add-hook 'org-mode-hook (lambda ()
			     (add-hook 'after-save-hook #'tangle-config)))

  (provide 'auto-tangle)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'auto-tangle)
#+end_src
