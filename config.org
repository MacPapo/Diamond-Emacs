#+title: MacPapo's Config
#+author: Jacopo Costantini


* General Settings

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;; init.el --- Load the full configuration -*- lexical-binding: t -*-

  (add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

  (setq custom-file (locate-user-emacs-file "custom.el"))
  (when (file-exists-p custom-file)
    (load custom-file))

  (setq use-file-dialog nil)
  (setq use-dialog-box nil)
  (setq inhibit-startup-screen t)

  (setq-default
   window-resize-pixelwise t
   frame-resize-pixelwise t)

  (let ((no-border '(internal-border-width . 0)))
    (add-to-list 'default-frame-alist no-border)
    (add-to-list 'initial-frame-alist no-border))

  (setq frame-title-format
        '((:eval (if (buffer-file-name)
                     (abbreviate-file-name (buffer-file-name))
                   "%b"))))

  ;; TODO: sposta da qui
  (setq-default history-length 1000)
  (add-hook 'after-init-hook 'savehist-mode)

#+end_src

** GC Optimizations

#+begin_src elisp :tangle ~/.emacs.d/early-init.el
  ;; -*- lexical-binding: t; -*
  (defconst *is-a-mac* (eq system-type 'darwin))
  (setq package-enable-at-startup nil)

      ;;; Runtime optimizations
  ;; PERF: A second, case-insensitive pass over `auto-mode-alist' is time wasted.
  (setq auto-mode-case-fold nil)

  ;; PERF: Disable bidirectional text scanning for a modest performance boost.
  ;;   I've set this to `nil' in the past, but the `bidi-display-reordering's docs
  ;;   say that is an undefined state and suggest this to be just as good:
  (setq-default bidi-display-reordering 'left-to-right
        	bidi-paragraph-direction 'left-to-right)

  ;; PERF: Disabling BPA makes redisplay faster, but might produce incorrect
  ;;   reordering of bidirectional text with embedded parentheses (and other
  ;;   bracket characters whose 'paired-bracket' Unicode property is non-nil).
  (setq bidi-inhibit-bpa t)  ; Emacs 27+ only

  ;; Reduce rendering/line scan work for Emacs by not rendering cursors or regions
  ;; in non-focused windows.
  (setq-default cursor-in-non-selected-windows nil)
  (setq highlight-nonselected-windows nil)

  ;; More performant rapid scrolling over unfontified regions. May cause brief
  ;; spells of inaccurate syntax highlighting right after scrolling, which should
  ;; quickly self-correct.
  ;; (setq fast-but-imprecise-scrolling t)

  ;; Don't ping things that look like domain names.
  (setq ffap-machine-p-known 'reject)

  ;; Emacs "updates" its ui more often than it needs to, so slow it down slightly
  (setq idle-update-delay 1.0)  ; default is 0.5

  ;; Font compacting can be terribly expensive, especially for rendering icon
  ;; fonts on Windows. Whether disabling it has a notable affect on Linux and Mac
  ;; hasn't been determined, but do it anyway, just in case. This increases memory
  ;; usage, however!
  (setq inhibit-compacting-font-caches t)

  ;; Increase how much is read from processes in a single chunk (default is 4kb).
  ;; This is further increased elsewhere, where needed (like our LSP module).
  (setq read-process-output-max (* 64 1024))  ; 64kb

  ;; Introduced in Emacs HEAD (b2f8c9f), this inhibits fontification while
  ;; receiving input, which should help a little with scrolling performance.
  (setq redisplay-skip-fontification-on-input t)

      ;;; Disable UI elements early
  ;; PERF,UI: Doom strives to be keyboard-centric, so I consider these UI elements
  ;;   clutter. Initializing them also costs a morsel of startup time. Whats more,
  ;;   the menu bar exposes functionality that Doom doesn't endorse. Perhaps one
  ;;   day Doom will support these, but today is not that day.
  ;;
  ;; HACK: I intentionally avoid calling `menu-bar-mode', `tool-bar-mode', and
  ;;   `scroll-bar-mode' because they do extra work to manipulate frame variables
  ;;   that isn't necessary this early in the startup process.
  (push '(menu-bar-lines . 0)   default-frame-alist)
  (push '(tool-bar-lines . 0)   default-frame-alist)
  (push '(vertical-scroll-bars) default-frame-alist)
  ;; And set these to nil so users don't have to toggle the modes twice to
  ;; reactivate them.
  (setq menu-bar-mode nil
        tool-bar-mode nil
        scroll-bar-mode nil)
  ;; FIX: On MacOS, disabling the menu bar makes MacOS treat Emacs as a
  ;;   non-application window -- which means it doesn't automatically capture
  ;;   focus when it is started, among other things, so enable the menu-bar for
  ;;   GUI frames, but keep it disabled in terminal frames because there it
  ;;   activates an ugly, in-frame menu bar.
  (when *is-a-mac*
    (add-hook 'window-setup-hook 'doom-restore-menu-bar-in-gui-frames-h)
    (add-hook 'after-make-frame-functions 'doom-restore-menu-bar-in-gui-frames-h)
    (defun doom-restore-menu-bar-in-gui-frames-h (&optional frame)
      (let ((use-frame (or frame (selected-frame))))
        (when (display-graphic-p use-frame)
          (set-frame-parameter use-frame 'menu-bar-lines 1)))))

  ;;; Encodings
  ;; Contrary to what many Emacs users have in their configs, you don't need more
  ;; than this to make UTF-8 the default coding system:
  (set-language-environment "UTF-8")

  (setq default-input-method nil)

  (let ((normal-gc-cons-threshold (* 20 1024 1024))
        (init-gc-cons-threshold (* 128 1024 1024)))
    (setq gc-cons-threshold init-gc-cons-threshold)
    (add-hook 'emacs-startup-hook
              (lambda () (setq gc-cons-threshold normal-gc-cons-threshold))))
#+end_src

** Package manager configuration

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-pkgmanager.el
  ;; -*- lexical-binding: t; -*-
  (defvar bootstrap-version)
  (let ((bootstrap-file
         (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
        (bootstrap-version 6))
    (unless (file-exists-p bootstrap-file)
      (with-current-buffer
          (url-retrieve-synchronously
           "https://raw.githubusercontent.com/radian-software/straight.el/develop/install.el"
           'silent 'inhibit-cookies)
        (goto-char (point-max))
        (eval-print-last-sexp)))
    (load bootstrap-file nil 'nomessage))

  (eval-when-compile
    (require 'use-package)
    (require 'straight)
    (setq straight-use-package-by-default t))

  (use-package diminish)

  (provide 'init-pkgmanager)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-pkgmanager)
#+end_src

** User local preferences

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-local nil t) 
#+end_src

** Appearance

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-theme.el
  ;; -*- lexical-binding: t; -*-

  (use-package zenburn-theme
    :init
    (setq custom-safe-themes t)
    (load-theme 'zenburn t))

  (use-package pulsar
    :config
    (setq pulsar-pulse t
          pulsar-face 'pulsar-yellow
          pulsar-highlight-face 'pulsar-yellow
          pulsar-delay 0.055)
    (add-to-list 'pulsar-pulse-functions 'ace-window)
    (pulsar-global-mode 1))

  (provide 'init-theme)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-theme)
#+end_src


** Keybindings

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-macos.el
  ;; -*- lexical-binding: t; -*-

  (when *is-a-mac*
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier 'none)

    (use-package exec-path-from-shell
      :config
      (exec-path-from-shell-initialize))

    (use-package osx-trash
      :config
      (setq delete-by-moving-to-trash t)
      (osx-trash-setup))

    (use-package reveal-in-osx-finder
      :bind ("C-c z" . reveal-in-osx-finder))

    ;; (global-set-key (kbd "M-`") 'ns-next-frame)
    ;; (global-set-key (kbd "M-h") 'ns-do-hide-emacs)
    ;; (global-set-key (kbd "M-˙") 'ns-do-hide-others)
    ;; (global-set-key (kbd "M-ˍ") 'ns-do-hide-others) ;; what describe-key reports for cmd-option-h
    )

  (provide 'init-macos)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-macos)
#+end_src

** Editing Utils

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-editing-utils.el
  ;; -*- lexical-binding: t; -*-

  (use-package electric-pair
    :straight nil
    :hook after-init)

  (use-package electric-indent
    :straight nil
    :hook after-init)

  (setq-default
   blink-cursor-interval 0.4
   bookmark-default-file (locate-user-emacs-file ".bookmarks.el")
   buffers-menu-max-size 30
   case-fold-search t
   column-number-mode t
   ediff-split-window-function 'split-window-horizontally
   ediff-window-setup-function 'ediff-setup-windows-plain
   indent-tabs-mode nil
   create-lockfiles nil
   auto-save-default nil
   make-backup-files nil
   mouse-yank-at-point t
   save-interprogram-paste-before-kill t
   scroll-preserve-screen-position 'always
   set-mark-command-repeat-pop t
   tooltip-delay 1.5
   truncate-lines nil
   visible-bell t
   use-short-answers t
   kill-do-not-save-duplicates t
   echo-keystrokes 0.02
   truncate-partial-width-windows nil)

  (use-package delete-selection
    :straight nil
    :hook after-init)

  (use-package hippie-expand
    :straight nil
    :bind ("M-/" . hippie-expand)
    :config
    (setq hippie-expand-try-functions-list
          '(try-complete-file-name-partially
            try-complete-file-name
            try-expand-dabbrev
            try-expand-dabbrev-all-buffers
            try-expand-dabbrev-from-kill)))

  (use-package global-auto-revert
    :diminish auto-revert
    :straight nil
    :hook after-init
    :config
    (setq global-auto-revert-non-file-buffers t
          auto-revert-verbose nil))

  (use-package uniquify
    :straight nil
    :config
    (setq uniquify-buffer-name-style 'reverse
          uniquify-separator " • "
          uniquify-after-kill-buffer-p t
          uniquify-ignore-buffers-re "^\\*"))

  (use-package transient-mark
    :straight nil
    :hook after-init)

  (use-package subword
    :diminish subword
    :straight nil
    :hook after-init)

  (use-package display-line-numbers
    :straight nil
    :hook prog-mode
    :config
    (setq-default display-line-numbers-width 3))

  (use-package display-fill-column-indicator
    :straight nil
    :hook prog-mode
    :config
    (setq-default indicate-buffer-boundaries 'left
                  display-fill-column-indicator-character ?\u254e))

  (use-package show-paren
    :straight nil
    :hook after-init)

  (put 'narrow-to-region 'disabled nil)
  (put 'narrow-to-page 'disabled nil)
  (put 'narrow-to-defun 'disabled nil)

  (put 'upcase-region 'disabled nil)
  (put 'downcase-region 'disabled nil)

  (use-package avy
    :bind (("C-:"   . avy-goto-char)
           ("C-'"   . avy-goto-char-2)
           ("M-g f" . avy-goto-line)
           ("M-g w" . avy-goto-word-1)
           ("M-g e" . avy-goto-word-0)
           ("M-Z"   . zap-up-to-char))
    :config
    (setq avy-background t)
    (setq avy-style 'at-full))

  (use-package origami
    :hook prog-mode
    :bind (("C-c f" . origami-recursively-toggle-node)
           ("C-c F" . origami-toggle-all-nodes)))

  (use-package multiple-cursors
    :bind (("C-S-c C-S-c" . mc/edit-lines)
           ("C->" . mc/mark-next-like-this)
           ("C-<" . mc/mark-previous-like-this)
           ("C-c C-<" . mc/mark-all-like-this)))

  (use-package ace-mc
    :bind (("C-c M-j" . ace-mc-add-multiple-cursors)
           ("C-c M-k" . ace-mc-add-single-cursor)))

  (global-unset-key [M-left])
  (global-unset-key [M-right])

  (use-package whole-line-or-region
    :demand t
    :diminish whole-line-or-region-local-mode)

  (global-set-key (kbd "M-j") 'join-line)

  (use-package anzu
    :bind (([remap query-replace-regexp] . anzu-query-replace-regexp)
           ([remap query-replace]        . anzu-query-replace)
           ("C-c a r"                    . anzu-query-replace-at-cursor)
           :map isearch-mode-map
           ([remap isearch-delete-char]  . isearch-del-char))
    :config
    (setq anzu-mode-lighter "")
    (global-anzu-mode +1))

  (use-package highlight-escape-sequences
    :init
    (add-hook 'after-init-hook 'hes-mode))

  (use-package recentf
    :straight nil
    :hook after-init
    :config
    (setq-default
     recentf-max-saved-items 1000
     recentf-exclude `("/tmp/" "/ssh:" ,(concat package-user-dir "/.*-autoloads\\.el\\'"))))

  (use-package info-colors
    :hook (Info-selection . info-colors-fontify-node))

  (use-package shfmt)

  (use-package dotenv-mode)

  (use-package crux
    :bind
    ([remap move-beginning-of-line] . crux-move-beginning-of-line)
    ([remap kill-whole-line]        . crux-kill-whole-line)
    ("C-<backspace>"                . crux-kill-line-backwards)
    ("C-S-o"                        . crux-smart-open-line-above)
    ("C-o"                          . crux-smart-open-line)
    ("C-c n"                        . crux-cleanup-buffer-or-region)
    ("C-c d"                        . crux-duplicate-current-line-or-region)
    ("C-c M-d"                      . crux-duplicate-and-comment-current-line-or-region)
    ("C-c r"                        . crux-rename-file-and-buffer)
    ("C-x C-u"                      . crux-upcase-region)
    ("C-x C-l"                      . crux-downcase-region)
    ("C-x M-c"                      . crux-capitalize-region)
    ("M-j"                          . crux-top-join-line))

  (use-package rainbow-delimiters
    :hook prog-mode)

  (use-package which-key
    :diminish which-key-mode
    :config
    (which-key-mode))

  (use-package embark
    :bind (("C-." . embark-act)
           ("C-;" . embark-dwim)
           ("C-h B" . embark-bindings)))

  (provide 'init-editing-utils)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-editing-utils)
#+end_src

** Treesitter

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-treesitter.el
  ;; -*- lexical-binding: t; -*-

  (setq treesit-language-source-alist
        '((bash "https://github.com/tree-sitter/tree-sitter-bash")
          (c "https://github.com/tree-sitter/tree-sitter-c")
          (cmake "https://github.com/uyha/tree-sitter-cmake")
          (common-lisp "https://github.com/theHamsta/tree-sitter-commonlisp")
          (cpp "https://github.com/tree-sitter/tree-sitter-cpp")
          (css "https://github.com/tree-sitter/tree-sitter-css")
          (csharp "https://github.com/tree-sitter/tree-sitter-c-sharp")
          (elisp "https://github.com/Wilfred/tree-sitter-elisp")
          (go "https://github.com/tree-sitter/tree-sitter-go")
          (go-mod "https://github.com/camdencheek/tree-sitter-go-mod")
          (html "https://github.com/tree-sitter/tree-sitter-html")
          (js . ("https://github.com/tree-sitter/tree-sitter-javascript" "master" "src"))
          (json "https://github.com/tree-sitter/tree-sitter-json")
          (lua "https://github.com/Azganoth/tree-sitter-lua")
          (make "https://github.com/alemuller/tree-sitter-make")
          (markdown "https://github.com/ikatyang/tree-sitter-markdown")
          (python "https://github.com/tree-sitter/tree-sitter-python")
          (r "https://github.com/r-lib/tree-sitter-r")
          (rust "https://github.com/tree-sitter/tree-sitter-rust")
          (toml "https://github.com/tree-sitter/tree-sitter-toml")
          (tsx . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "tsx/src"))
          (typescript . ("https://github.com/tree-sitter/tree-sitter-typescript" "master" "typescript/src"))
          (yaml "https://github.com/ikatyang/tree-sitter-yaml")))

  (setq treesit-load-name-override-list nil
        treesit-font-lock-level 4)

  (use-package treesit-auto
    :config
    (global-treesit-auto-mode))

  (provide 'init-treesitter)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-treesitter)
#+end_src

** Flymake Flycheck

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-flymake.el
  ;; -*- lexical-binding: t; -*-
  
  (use-package flymake-flycheck
    :bind (:map flymake-mode-map
                ("C-c ! l" . flymake-show-buffer-diagnostics)
                ("C-c ! n" . flymake-goto-next-error)
                ("C-c ! p" . flymake-goto-prev-error)
                ("C-c ! c" . flymake-start))
    :hook ((prog-mode     . flymake-mode)
           (text-mode     . flymake-mode)
           (flymake-mode  . (lambda ()
                              (setq-local flymake-diagnostic-functions
                                          (append flymake-diagnostic-functions
                                                  (flymake-flycheck-all-chained-diagnostic-functions)))))
           (flycheck-mode . (lambda ()
                              (setq-default flycheck-disabled-checkers
                                            (append (default-value 'flycheck-disabled-checkers)
                                                    '(emacs-lisp emacs-lisp-checkdoc emacs-lisp-package))))))
    :config
    (setq flymake-proc-allowed-file-name-masks nil))

  (provide 'init-flymake)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-flymake)
#+end_src

** Tramp

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-tramp.el

  (use-package tramp
    :straight nil
    :config
    (setq remote-file-name-inhibit-cache nil
          tramp-verbose 6
          tramp-inline-compress-start-size 1000000
          tramp-default-method "ssh"))

  (provide 'init-tramp)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-tramp)
#+end_src


** Shell

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-shell.el
  ;; -*- lexical-binding: t; -*-

  ;;(global-set-key (kbd "C-c e") 'eshell)

  (use-package eshell-prompt-extras
    :init
    (with-eval-after-load "esh-opt"
      (autoload 'epe-theme-lambda "eshell-prompt-extras")
      (setq eshell-highlight-prompt nil
            eshell-prompt-function 'epe-theme-lambda)))

  (use-package eshell-syntax-highlighting
    :config
    (eshell-syntax-highlighting-global-mode +1))

  (provide 'init-shell)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-shell)
#+end_src

* Packages

** Dired

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-dired.el
  ;; -*- lexical-binding: t; -*-

  (require 'dired)
  (setq-default dired-dwim-target t)

  ;; Prefer g-prefixed coreutils version of standard utilities when available
  (let ((gls (executable-find "gls")))
    (when gls (setq insert-directory-program gls)))

  (use-package diredfl
    :config
    (diredfl-global-mode 1))

  (use-package dired-recent
    :init
    (dired-recent-mode 1))

  (use-package dired-hacks-utils
    :bind (:map dired-mode-map
                ("M-n" . dired-hacks-next-file)
                ("M-p" . dired-hacks-previous-file)))

  (use-package dired-filter
    :bind (:map dired-mode-map
                ("/" . dired-filter-mode)))

  (use-package dired-subtree
    :bind (:map dired-mode-map
                ("i" . dired-subtree-insert)
                (";" . dired-subtree-remove)))

  (use-package dired-narrow
    :bind (:map dired-mode-map
                ("s" . dired-narrow))
    :config
    (setq dired-narrow-exit-when-1-left nil))

  (provide 'init-dired)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-dired)
#+end_src

** Helm Completion

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-helm.el
  ;; -*- lexical-binding: t; -*-

  (use-package helm
    :diminish helm-mode
    :bind (("C-x b"   . helm-mini)
           ("M-x"     . helm-M-x)
           ("C-x C-f" . helm-find-files)
           ("M-y"     . helm-show-kill-ring)
           ("<f1> f"  . helm-apropos)
           ("C-c o"   . helm-imenu)
           ("C-c b"   . helm-bookmarks)
           ("C-c t"   . helm-themes)
           ("<f1> l"  . helm-locate-library)
           :map helm-find-files-map
           ("C-c C-i" . helm-ff-properties-persistent))
    :config
    (setq helm-M-x-fuzzy-match                  t
          helm-buffers-fuzzy-matching           t
          helm-recentf-fuzzy-match              t
          helm-locate-fuzzy-match               t
          helm-candidate-number-limit           200
          helm-split-window-inside-p            t
          helm-always-two-windows               nil
          helm-display-buffer-default-height    15
          helm-move-to-line-cycle-in-source     t
          helm-autoresize-max-height            40
          helm-autoresize-min-height            20
          helm-M-x-show-short-doc               t
          helm-default-display-buffer-functions '(display-buffer-in-side-window)
          helm-boring-buffer-regexp-list        '("\\*copilot-balancer\\*"
                                                  "\\*straight-process\\*"
                                                  "\\*code-conv\\*"))
    (helm-mode 1)
    (helm-autoresize-mode 1))

  (use-package helm-projectile
    :after (helm projectile)
    :config
    (helm-projectile-on)
    :bind (("C-c p h" . helm-projectile)
           ("C-c p p" . helm-projectile-switch-project)
           ("C-c p f" . helm-projectile-find-file)
           ("C-c p g" . helm-projectile-grep)))

  (use-package helm-git-grep
    :after helm
    :bind (("C-c g" . helm-git-grep)
           ("C-c G" . helm-git-grep-at-point))
    :config
    (setq helm-git-grep-include-submodules t)
    (setq helm-git-grep-use-iomenu-last-pattern t))

  (use-package helm-ls-git
    :bind (("M-g G" . helm-browse-project)
           ("M-g H" . helm-projects-history)))

  (use-package helm-gitignore
    :after helm)

  (use-package helm-themes
    :after helm)

  (use-package helm-swoop
    :after helm
    :bind (("M-i"     . helm-swoop)
           ("M-I"     . helm-swoop-back-to-last-point)
           ("C-c M-i" . helm-multi-swoop)
           ("C-x M-i" . helm-multi-swoop-all)
           :map isearch-mode-map
           ("M-i"     . helm-swoop-from-isearch)
           :map helm-swoop-map
           ("M-i"     . helm-multi-swoop-all-from-helm-swoop)
           ("M-m"     . helm-multi-swoop-current-mode-from-helm-swoop)
           ("C-r"     . helm-previous-line)
           ("C-s"     . helm-next-line)
           ("C-r"     . helm-previous-line)
           ("C-s"     . helm-next-line))
    :config
    (setq helm-multi-swoop-edit-save t
          helm-swoop-split-with-multiple-windows nil
          helm-swoop-split-direction 'split-window-vertically
          helm-swoop-speed-or-color nil
          helm-swoop-move-to-line-cycle t
          helm-swoop-use-line-number-face t
          helm-swoop-use-fuzzy-match t))

  (use-package helm-rg
    :after helm
    :bind ("C-c k" . helm-rg))

  (use-package helm-mt
    :after helm
    :bind (("C-x T" . helm-mt))
    :config
    (helm-mt/reroute-terminal-functions t))

  (use-package helm-tramp
    :after helm
    :bind (("C-c s" . helm-tramp))
    ;; :hook ((helm-tramp-pre-command . '(lambda ()
    ;;                                     (global-aggressive-indent-mode 0)
    ;;                                     (projectile-mode 0)
    ;;                                     (editorconfig-mode 0)))
    ;;        (helm-tramp-quit        . '(lambda ()
    ;;                                     (global-aggressive-indent-mode 1)
    ;;                                     (projectile-mode 1)
    ;; (editorconfig-mode 1))))
    )

  (use-package helm-make
    :after helm
    :bind ("C-c c" . helm-make-projectile))

  (use-package helm-descbinds
    :after helm
    :bind ("<f2> D" . helm-descbinds))

  (use-package helm-osx-app
    :bind (("C-c SPC" . helm-osx-app)))

  (use-package helm-c-yasnippet
    :after (yasnippet helm)
    :bind (("C-c Y" . helm-yas-complete)
           ("<f6>"  . helm-yas-visit-snippet-file))
    :config
    (setq helm-yas-space-match-any-greedy t))

  (provide 'init-helm)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
 ;; (require 'init-helm)
#+end_src

** Ivy Completion

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-ivy.el
  ;; -*- lexical-binding: t; -*-

  (use-package ivy
    :diminish ivy-mode
    :bind (("C-x b" . ivy-switch-buffer)
           ("C-c v" . ivy-push-view)
           ("C-c V" . ivy-pop-view))
    :config
    (setq ivy-use-virtual-buffers        t
          ivy-count-format               "(%d/%d) "
          ivy-display-style              'fancy
          ivy-initial-inputs-alist       nil
          enable-recursive-minibuffers   t
          ivy-wrap t)
    (ivy-mode 1))

  (use-package ivy-rich
    :config
    (ivy-rich-modify-column
     'ivy-switch-buffer
     'ivy-rich-switch-buffer-major-mode
     '(:width 20 :face error))
    (ivy-rich-mode 1))

  (use-package counsel
    :bind (("M-x"     . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("M-y"     . counsel-yank-pop)
           ("<f1> f"  . counsel-describe-function)
           ("<f1> v"  . counsel-describe-variable)
           ("<f1> l"  . counsel-find-library)
           ("<f2> i"  . counsel-info-lookup-symbol)
           ("<f2> u"  . counsel-unicode-char)
           ("<f2> j"  . counsel-set-variable)

           ;; Ivy-based interface to shell and system tools
           ("C-c c"   . counsel-compile)
           ("C-c g"   . counsel-git)
           ("C-c j"   . counsel-git-grep)
           ("C-c L"   . counsel-git-log)
           ("C-c k"   . counsel-rg)
           ("C-x l"   . counsel-locate)
           ("C-c J"   . counsel-file-jump)

           ;; Ivy-resume and other commands
           ("C-c C-r" . ivy-resume)
           ("C-c b"   . counsel-bookmark)
           ("C-c D"   . counsel-descbinds)
           ("C-c o"   . counsel-outline)
           ("C-c t"   . counsel-load-theme)
           ("C-c F"   . counsel-org-file)))

  (use-package marginalia
    :bind (:map minibuffer-local-map
                ("M-A" . marginalia-cycle))
    :init
    (marginalia-mode))

  (provide 'init-ivy)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;(require 'init-ivy)
#+end_src

** Ido

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-ido.el
  ;; -*- lexical-binding: t; -*-

  (use-package ido
    :config
    (setq ido-enable-prefix nil
          ido-case-fold t
          ido-auto-merge-work-directories-length -1
          ido-create-new-buffer 'always
          ido-use-filename-at-point nil
          ido-use-virtual-buffers 'auto
          ido-virtual-buffers t
          ido-file-extensions-order '(".org" ".el" ".c" ".cpp" ".rb" ".java" ".lisp" ".md" ".dart")
          ido-use-faces t
          ido-max-prospects 10)
    (add-to-list 'ido-ignore-directories "target")
    (add-to-list 'ido-ignore-directories "node_modules")
    (ido-mode 1)
    (ido-everywhere 1))

  (use-package ido-completing-read+
    :config
    (ido-ubiquitous-mode 1))

  (use-package smex
    :bind (("M-x" . smex)
           ("M-X" . smex-major-mode-commands))
    :config
    (smex-initialize))

  (use-package icomplete
    :straight nil
    :config
    (icomplete-mode 1))

  (provide 'init-ido)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-ido)
#+end_src

** Projectile

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-projectile.el
  ;; -*- lexical-binding: t; -*-

  (use-package projectile
    :defer 5
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map))
    :config
    (setq projectile-indexing-method                'alien
          projectile-sort-order                     'modification-time
          projectile-enable-caching                 t
          projectile-per-project-compilation-buffer t
          projectile-mode-line-function             '(lambda ()
                                                       (format " Proj[%s]"
                                                               (projectile-project-name))))
     (projectile-mode +1))

  (use-package projectile-git-autofetch
    :diminish projectile-git-autofetch-mode
    :config
    (projectile-git-autofetch-mode 1))

  (provide 'init-projectile)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-projectile)
#+end_src

** Grep

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-grep.el
  ;; -*- lexical-binding: t; -*-

  (setq-default grep-highlight-matches t
                grep-scroll-output t)

  (when *is-a-mac*
    (setq-default locate-command "mdfind"))

  (use-package wgrep
    :bind (:map grep-mode-map
           ("C-c C-q" . wgrep-change-to-wgrep-mode)))

  (use-package deadgrep
    :bind ("<f5>" . deadgrep))

  (provide 'init-grep)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-grep)
#+end_src

** Corfu

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-corfu.el
  ;; -*- lexical-binding: t; -*-

  (use-package corfu
    :hook
    ((shell-mode  . (lambda () (setq-local corfu-auto nil)))
     (eshell-mode . (lambda () (setq-local corfu-auto nil)))
     (term-mode   . (lambda () (setq-local corfu-auto nil)))
     (after-init  . global-corfu-mode))
    :custom
    (corfu-cycle t)
    (corfu-auto t) 
    (corfu-commit-predicate nil)
    (corfu-quit-no-match t)
    (corfu-auto-delay 0)
    (corfu-auto-prefix 1)
    :bind (:map corfu-map
                ("TAB" . corfu-insert)
                ([tab] . corfu-insert))

  (provide 'init-corfu)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;(require 'init-corfu)
#+end_src

** Company

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-company.el
  ;; -*- lexical-binding: t; -*-

  (use-package company
    :hook ((prog-mode . (lambda ()
                          (setq-local company-backends
                                      '((company-capf :with company-yasnippet)))
                          (company-mode)))
           (text-mode . (lambda ()
                          (setq-local company-backends
                                      '((company-dabbrev company-ispell :separate)
                                        company-files))
                          (company-mode))))
    :config
    (setq company-tooltip-align-annotations t
          company-selection-wrap-around t
          company-lighter-base "©"
          company-tooltip-limit 10
          company-idle-delay 0.0
          company-minimum-prefix-length 1
          company-require-match nil
          company-format-margin-function 'company-text-icons-margin
          company-tooltip-minimum 4
          company-text-face-extra-attributes '(:weight bold :slant italic)
          company-text-icons-add-background t
          company-tooltip-flip-when-above t
          company-show-quick-access 'left
          company-files-exclusions '(".git/" ".DS_Store")
          company-transformers '(delete-consecutive-dups
                             company-sort-by-occurrence)
          company-global-modes '(not erc-mode message-mode eshell-mode))
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection)))

  (provide 'init-company)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-company)
#+end_src


** Eglot

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-eglot.el
  ;; -*- lexical-binding: t; -*-

  (require 'eglot)

  (setq read-process-output-max (* 3 1024 1024))
  
  ;; Default of 800 was too low.
  ;; Avoid Lisp nesting exceeding in swift-mode.
  (setq max-lisp-eval-depth 10000)

  (provide 'init-eglot)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  ;;(require 'init-eglot)
#+end_src

** LSP Mode

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-lsp.el
  ;; -*- lexical-binding: t; -*-

  (use-package lsp-mode
    :commands lsp
    :hook ((c-ts-mode . lsp))
    :config
    (require 'lsp-clients)
    (setq lsp-log-io nil)
    (setq lsp-idle-delay 0.500)
    (setq lsp-auto-guess-root t))

  (provide 'init-lsp)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-lsp)
#+end_src

** Windows

Ace Window Config
Remember:
x - delete window
m - swap windows
M - move window
c - copy window
j - select buffer
n - select the previous window
u - select buffer in the other window
c - split window fairly, either vertically or horizontally
v - split window vertically
b - split window horizontally
o - maximize current window
? - show these command bindings

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-windows.el
  ;; -*- lexical-binding: t; -*-

  (use-package winner-mode
    :straight nil
    :hook after-init)

  (use-package ace-window
    :bind ("M-o" . ace-window)
    :config
    (setq aw-keys '(?a ?s ?d ?f ?g ?h ?j ?k ?l)))

  (provide 'init-windows)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-windows)
#+end_src

** Git

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-git.el
  ;; -*- lexical-binding: t; -*-

  (use-package git-modes)

  (use-package git-timemachine
    :bind ("C-x v t" . git-timemachine-toggle))

  (use-package magit
    :bind
    (([(meta f12)] . magit-status)
     ("C-x g"      . magit-status)
     ("C-x M-g"    . magit-dispatch))
    :hook (magit-mode . (lambda () (local-unset-key [(meta h)])))
    :config
    (setq-default magit-diff-refine-hunk 'all))

  (use-package forge
    :after magit)

  (use-package diff-hl
    :hook ((dired-mode         . diff-hl-dired-mode)
           (magit-post-refresh . diff-hl-magit-post-refresh)
           (after-init         . global-diff-hl-mode))
    :bind (:map diff-hl-mode-map
                ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk)))

  (provide 'init-git)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-git)
#+end_src

** ORG MODE

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-org.el
  ;; -*- lexical-binding: t; -*-

  (use-package org)

  (use-package org-wc
    :after org)

  (use-package org-pomodoro
    :after org)

  (use-package org-zettelkasten
    :hook org-mode)

  (use-package org-super-agenda
    :after org-agenda
    :config
    (setq org-agenda-files '("~/org/agenda/agenda.org"
                             "~/org/agenda/sessione.org"))
    (setq org-super-agenda-groups
          '((:name "Oggi"
                   :time-grid t
                   :scheduled today)
            (:name "Importante"
                   :priority "A")))
    (org-super-agenda-mode))

  (provide 'init-org)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-org)
#+end_src

** Yasnippet

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-yasnippet.el
  (use-package yasnippet
    :defer 5
    :diminish yasnippet
    :bind (:map  yas-minor-mode-map
                 ("<backtab>" . yas-expand))
    :config
    ;;(setq yas-snippet-dirs '("~/.emacs.d/personal-snippets"))
    (yas-global-mode 1))

  (use-package yasnippet-snippets
    :after yasnippet)

  (provide 'init-yasnippet)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-yasnippet)
#+end_src

* Languages

** Dart

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-dart.el
  ;; -*- lexical-binding: t; -*-

  (use-package dart-mode
    :bind (:map dart-mode-map
                ("C-M-x" . flutter-run-or-hot-reload)))

  (use-package flutter
    :config
    (setq flutter-sdk-path "~/FlutterDev/flutter/"))

  (provide 'init-dart)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-dart)
#+end_src

** C/C++

#+begin_src elisp :tangle ~/.emacs.d/lisp/init-cxx.el
  
  (defvar +cc-default-compiler-options
    `((c-mode . nil)
      (c++-mode
       . ,(list "-std=c++17" ; use C++17 draft by default
                (when *is-a-mac*
                  ;; NOTE beware: you'll get abi-inconsistencies when passing
                  ;; std-objects to libraries linked with libstdc++ (e.g. if you
                  ;; use boost which wasn't compiled with libc++)
                  "-stdlib=libc++")))
      (objc-mode . nil))
    "A list of default compiler options for the C family. These are ignored if a
  compilation database is present in the project.")

  (use-package modern-cpp-font-lock
    :hook (c++-mode . modern-c++-font-lock-mode))

  (use-package disaster)

  (use-package cmake-mode)

  (use-package flycheck-clang-analyzer
    :hook (c++-ts-mode . (lambda () (setq flycheck-clang-language-standard "c++17")))
    :config (flycheck-clang-analyzer-setup))

  (provide 'init-cxx)
#+end_src

#+begin_src elisp :tangle ~/.emacs.d/init.el
  (require 'init-cxx)
#+end_src
