#+TITLE: Diamond Early Init Enviroment
#+PROPERTY: header-args :tangle ../../early-init.el
#+auto_tangle: t
#+STARTUP: showeverything
#+AUTHOR: Pietro Visconti


#+BEGIN_SRC elisp
;; Diamond Emacs for Mac
;;
;; Visco01 config started in 2022
#+END_SRC

* GC Hack

A big contributor to startup times is garbage collection. We up the gc
threshold to temporarily prevent it from running, then reset it later by
enabling `gcmh-mode'. Not resetting it will cause stuttering/freezes.

#+BEGIN_SRC elisp

  (setq gc-cons-threshold most-positive-fixnum)

#+END_SRC

* Priority Hack

In noninteractive sessions, prioritize non-byte-compiled source files to
prevent the use of stale byte-code. Otherwise, it saves us a little IO time
to skip the mtime checks on every *.elc file.

#+BEGIN_SRC elisp

  (setq load-prefer-newer noninteractive)

#+END_SRC

* Redisplays Hack

Premature redisplays can substantially affect startup times and produce
ugly flashes of unstyled Emacs.

#+BEGIN_SRC elisp

  (setq-default inhibit-redisplay t
                inhibit-message t)
  (add-hook 'window-setup-hook
            (lambda ()
              (setq-default inhibit-redisplay nil
                            inhibit-message nil)
              (redisplay))
            )

#+END_SRC

* Load-file Hack

Site files tend to use `load-file', which emits "Loading X..." messages in
the echo area, which in turn triggers a redisplay. Redisplays can have a
substantial effect on startup times and in this case happens so early that
Emacs may flash white while starting up.

#+BEGIN_SRC elisp

  (define-advice load-file (:override (file) silence)
    (load file nil 'nomessage)
    )

#+END_SRC

Undo our `load-file' advice above, to limit the scope of any edge cases it
may introduce down the road.

#+BEGIN_SRC elisp

  (define-advice startup--load-user-init-file (:before (&rest _) init-doom)
    (advice-remove #'load-file #'load-file@silence)
    )

    #+END_SRC
