#+TITLE: Diamond Packages Enviroment
#+PROPERTY: header-args :tangle ../../packages.el
#+auto_tangle: t
#+STARTUP: showeverything
#+AUTHOR: Jacopo Costantini

* Diamond Packages

Diamond Emacs is built using also Packages, and these are our selection divided in Categories.

** Core Packages

Diamond Emacs sign

#+BEGIN_SRC elisp
  ;; Diamond Emacs for Mac
  ;;
  ;; MacPapo config started in 2022
#+END_SRC

*** Auto package Update

Diamond Emacs use to auto update the packages

#+BEGIN_SRC elisp
  ;; Update packages automatically
  (use-package auto-package-update
    :defer 0.2
    :ensure t
    :commands update-packages
    :custom
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-maybe))
#+END_SRC


*** Garbage Collaction Hack

Diamond Emacs use Garbage collection Hack to improve Emacs performance

#+BEGIN_SRC elisp

  (use-package gcmh
    :ensure t
    :demand t
    :config
    (gcmh-mode 1)
    )

#+END_SRC


*** Auto tangle

Auto-tangle automatically tangle the source file from these org config files

#+BEGIN_SRC elisp

  (use-package org-auto-tangle
    :defer t
    :ensure t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t)
    )

#+END_SRC


*** No littering

Diamond Emacs want to remain clean during Emacs jurney

#+BEGIN_SRC elisp

  (use-package no-littering
    :ensure t
    :demand t
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (setq custom-file (no-littering-expand-etc-file-name "packages.el"))
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name  "var/eln-cache/" user-emacs-directory))))
    )

#+END_SRC

*** Vertico

#+BEGIN_SRC elisp

  (use-package vertico
    :ensure t
    :demand t
    :init
    (vertico-mode)

    ;; Different scroll margin
    (setq vertico-scroll-margin 0)

    ;; Show more candidates
    ;; (setq vertico-count 20)

    ;; Grow and shrink the Vertico minibuffer
    ;; (setq vertico-resize t)

    ;; Optionally enable cycling for `vertico-next' and `vertico-previous'.
    (setq vertico-cycle t)
    )

#+END_SRC

*** Save Hist

#+BEGIN_SRC elisp

  (use-package savehist
    :ensure t
    :init
    (savehist-mode)
    )

#+END_SRC

** Diamond UI

*** All the icons

Diamond Emacs use all-the-icons to feel cool

#+BEGIN_SRC elisp

  (use-package all-the-icons
    :ensure t
    )

#+END_SRC

*** Solaire Mode

#+BEGIN_SRC elisp

  (use-package solaire-mode
    :defer 0.5
    :ensure t
    :hook (after-init . solaire-global-mode)
    )

#+END_SRC

*** Diamond Dashboard

#+BEGIN_SRC elisp

  (use-package dashboard
    :ensure t
    :demand t
    :init
    (add-hook 'dashboard-mode-hook (lambda () (setq show-trailing-whitespace nil)))
    :custom
    (dashboard-banner-logo-title "[D I A M O N D  E M A C S]")
    (dashboard-startup-banner "~/.emacs.d/etc/banner/diamond_dogs.png")
    (dashboard-footer-messages '("Kept you waiting huh!"))
    (dashboard-footer-icon (all-the-icons-wicon "meteor" :height 1.1 :v-adjust -0.05 :face 'font-lock-keyword-face))
    (dashboard-center-content t)
    (dashboard-set-heading-icons t)
    (dashboard-set-file-icons t)
    (dashboard-set-navigator t)
    (dashboard-navigator-buttons
     `(
       ;; Links
       ((,(all-the-icons-octicon "octoface" :height 1.1 :v-adjust 0.0)
         "Homepage"
         "Browse homepage"
         (lambda (&rest _) (browse-url "https://github.com/MacPapo/Diamond-Emacs")) nil "" " |")
        (,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
         "Update"
         "Update Megumacs"
         (lambda (&rest _) (update-packages)) warning "" " |")
        (,(all-the-icons-faicon "flag" :height 1.1 :v-adjust 0.0) nil
         "Report a BUG"
         (lambda (&rest _) (browse-url "https://github.com/MacPapo/Diamond-Emacs/issues/new")) error "" ""))
       ;; Empty line
       (("" "\n" "" nil nil "" ""))
       ;; Keybindings
       ((,(all-the-icons-octicon "search" :height 0.9 :v-adjust -0.1)
         " Find file" nil
         (lambda (&rest _) (counsel-find-file)) nil "" "            C-x C-f"))
       ;; ((,(all-the-icons-octicon "file-directory" :height 1.0 :v-adjust -0.1)
       ;;   " Open project" nil
       ;;   (lambda (&rest _) (counsel-projectile-switch-project)) nil "" "         SPC p p"))

       ((,(all-the-icons-octicon "three-bars" :height 1.1 :v-adjust -0.1)
         " File explorer" nil
         (lambda (&rest _) (counsel-projectile-switch-project)) nil "" "           C-x d"))
       ((,(all-the-icons-octicon "settings" :height 0.9 :v-adjust -0.1)
         " Open settings" nil
         (lambda (&rest _) (open-config-file)) nil "" "        C-f C-P"))
       ))
    :config
    (dashboard-setup-startup-hook)
    )

#+END_SRC


** Window Managing

*** Winum

Use winum to quickly change window by the number in the modeline

#+BEGIN_SRC elisp

    (use-package winum
      :defer 0.5
      :ensure t
      :custom
      (winum-auto-setup-mode-line t)
      :config
      (winum-mode)
      :bind (
             ;; Select the window with Meta
             ("M-1" . winum-select-window-1)
             ("M-2" . winum-select-window-2)
             ("M-3" . winum-select-window-3)
             ("M-4" . winum-select-window-4)
             ("M-5" . winum-select-window-5)
             ("M-6" . winum-select-window-6))
      )
#+END_SRC


** Git integration

Magit Integration, the best Git interface

#+BEGIN_SRC elisp

  (use-package magit
    :commands magit-file-delete
    :defer 0.5
    :ensure t
    :init
    (setq magit-auto-revert-mode nil)  ; we do this ourselves further down
    ;; Must be set early to prevent ~/.emacs.d/transient from being created
    :config
    (setq transient-default-level 5
          magit-diff-refine-hunk t ; show granular diffs in selected hunk
          ;; Don't autosave repo buffers. This is too magical, and saving can
          ;; trigger a bunch of unwanted side-effects, like save hooks and
          ;; formatters. Trust the user to know what they're doing.
          magit-save-repository-buffers nil
          ;; Don't display parent/related refs in commit buffers; they are rarely
          ;; helpful and only add to runtime costs.
          magit-revision-insert-related-refs nil)

    (add-hook 'magit-popup-mode-hook #'hide-mode-line-mode)

    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status))
    )

#+END_SRC


** Org Mode

Org Mode is one of the best feature of Emacs and Diamond Emacs want to create a perfect harmony between writing and visualizing content in Org files

*** Org Modern

Org Modern create a stunning UI look for Org files

#+BEGIN_SRC elisp

  (use-package org-modern
    :ensure t
    :config
    (global-org-modern-mode)
    )

#+END_SRC

*** Olivetti

Olivetti mode redefine the width of the screen and center the content in the middle, creating a typewriter feel

#+BEGIN_SRC elisp

  (use-package olivetti
    :defer 1
    :ensure t
    :bind ("C-M-z" . olivetti-mode)
    )

#+END_SRC


** Dired

Dired the file manager of choice

*** DIRED CONFIG

Diamond Emacs use icons for dired to simplify the viewing of files and folders

#+BEGIN_SRC elisp

  (use-package all-the-icons-dired
    :ensure t
    :defer t
    :hook
    (dired-mode . all-the-icons-dired-mode)
    )

#+END_SRC


** Terminals

*** VTerm

#+BEGIN_SRC elisp

  (use-package vterm
    :ensure t)

#+END_SRC

*** ESHELL

ESHELL an Elisp Terminal for the love and life

**** ESHELL CONFIG

Some eshell improvements

#+BEGIN_SRC elisp

  (use-package eshell
    :ensure t
    :defer t
    :hook
    ;; (eshell-load . (lambda ()
    ;;                       (eshell-git-prompt-use-theme 'multiline2)))
    (eshell-mode . (lambda ()
                     (add-to-list 'eshell-visual-commands "rclone")
                     (add-to-list 'eshell-visual-commands "ssh")
                     (add-to-list 'eshell-visual-commands "tail")
                     (add-to-list 'eshell-visual-commands "top")
                     (eshell/alias "ff" "find-file $1")
                     (eshell/alias "emacs" "find-file $1")
                     (eshell/alias "untar" "tar -zxvf")
                     (eshell/alias "cpv" "rsync -ah --info=progress2")
                     (eshell/alias "ll" "ls -Alh")))
    :custom
    (eshell-error-if-no-glob t)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t)
    (eshell-destroy-buffer-when-process-dies t)
    :config
    (setenv "PAGER" "cat")
    )

#+END_SRC

**** ESHELL TOGGLE

Toggle and eshell buffer with "C-c e"

#+BEGIN_SRC elisp

  (use-package eshell-toggle
      :defer t
      :ensure t
      :custom
      (eshell-toggle-size-fraction 3)
      (eshell-toggle-run-command nil)
      (eshell-toggle-init-function #'eshell-toggle-init-eshell)
      (eshell-toggle-window-side 'right)
      :bind
      ("C-c e" . eshell-toggle)
      )

#+END_SRC


** Mail Reader

Diamond Emacs can recive, sand and write emails thanks to mu4e

#+BEGIN_SRC elisp

  (use-package mu4e
    :ensure nil
    :defer 5
    :load-path "/opt/homebrew/Cellar/mu/1.6.11/share/emacs/site-lisp/mu4e/"
    :config
    (setq mu4e-update-interval 300)            ; Update interval (seconds)
    (setq mu4e-index-cleanup t)                ; Cleanup after indexing
    (setq mu4e-maildir "~/Documents/Mails")
    (setq mu4e-attachment-dir "~/Downloads")
    (setq mu4e-index-update-error-warning t)   ; Warnings during update
    (setq mu4e-index-update-in-background t)   ; Background update
    (setq mu4e-change-filenames-when-moving t) ; Needed for mbsync
    (setq mu4e-get-mail-command "/opt/homebrew/bin/mbsync -a")
    (setq mu4e-index-lazy-check nil)           ; Don't be lazy, index everything
    (setq mu4e-confirm-quit nil)
    (setq mu4e-headers-include-related t)
    (setq mu4e-headers-skip-duplicates t)
    (setq mu4e-sent-folder "/uni/sent")
    (setq mu4e-trash-folder "/uni/trash")
    (setq mu4e-drafts-folder "/uni/drafts")
    (setq mu4e-maildir-shortcuts '(("/uni/inbox" . ?i)
                                   ("/uni/archive". ?a)
                                   ("/uni/sent" . ?s)))
    )

#+END_SRC


** PDF Tools

Diamond Emacs offer PDF Tools to interact with pdfs

#+BEGIN_SRC elisp

  (use-package pdf-tools
    :defer 5
    :ensure t
    :magic ("%PDF" . pdf-view-mode)
    :config   (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-use-scaling t
          pdf-view-use-imagemagick nil)
    )

#+END_SRC

*** Saveplace PDF view

Diamond Emacs remembers the location where you last stopped to read the pdf

#+BEGIN_SRC elisp

  (use-package saveplace-pdf-view
    :defer 2
    :ensure t
    :after pdf-view)

#+END_SRC
