#+TITLE: Diamond Packages Enviroment
#+PROPERTY: header-args :tangle ../../packages.el
#+auto_tangle: t
#+STARTUP: showeverything
#+AUTHOR: Pietro Visconti

* Diamond Packages

Diamond Emacs is built using also Packages, and these are our selection divided in Categories.

** Core Packages

#+BEGIN_SRC elisp
  ;; Diamond Emacs for Mac
  ;;
  ;; Visco01 config started in 2022
#+END_SRC

*** Auto package Update

Diamond Emacs use to auto update the packages

#+BEGIN_SRC elisp

  (use-package auto-package-update
    :ensure t
    :commands update-packages
    :custom
    (auto-package-update-delete-old-versions t)
    :config
    (auto-package-update-at-time "03:00")
    )

#+END_SRC


*** Garbage Collaction Hack

Diamond Emacs use Garbage collection Hack to improve Emacs performance

#+BEGIN_SRC elisp

  (use-package gcmh
    :ensure t
    :config
    (gcmh-mode 1)
    )

#+END_SRC


*** Auto tangle

Auto-tangle automatically tangle the source file from these org config files

#+BEGIN_SRC elisp

  (use-package org-auto-tangle
    :ensure t
    :defer t
    :hook (org-mode . org-auto-tangle-mode)
    :config
    (setq org-auto-tangle-default t)
    )

#+END_SRC


*** No littering

Diamond Emacs want to remain clean during Emacs jurney

#+BEGIN_SRC elisp

  (use-package no-littering
    :ensure t
    :defer t
    :config
    (setq auto-save-file-name-transforms
          `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
    (setq custom-file (no-littering-expand-etc-file-name "custom.el"))
    (setq custom-file (no-littering-expand-etc-file-name "packages.el"))
    (when (fboundp 'startup-redirect-eln-cache)
      (startup-redirect-eln-cache
       (convert-standard-filename
        (expand-file-name  "var/eln-cache/" user-emacs-directory))))
    )

#+END_SRC

*** Projectile

#+begin_src elisp

  (use-package projectile
    :ensure t
    :init
    (projectile-mode +1)
    :config
    (setq projectile-indexing-method 'alien)
    (setq projectile-file-exists-remote-cache-expire nil)
    (setq projectile-completion-system 'helm)
    :bind (:map projectile-mode-map
                ("C-c p" . projectile-command-map)))

#+end_src

*** Helm

#+begin_src elisp

  (use-package helm
    :ensure t
    :config
    (require 'helm-config)
    (setq helm-split-window-in-side-p t
          helm-mode-to-line-cycle-in-source t)
    (helm-ff-icon-mode 1)
    (helm-mode 1)
    :bind(
          ("C-x b" . helm-buffers-list)
          ("C-x r b" . helm-bookmarks)
          ("C-x C-f" . helm-find-files)
          ("C-s" . helm-occur)
          ("M-x" . helm-M-x)
          ("M-y" . helm-show-kill-ring))
    )

#+end_src

*** Helm-Projectile

#+begin_src elisp

  (use-package helm-projectile
    :ensure t
    :init (helm-projectile-on)
    )

#+end_src

*** Save Hist

#+BEGIN_SRC elisp

  (use-package savehist
    :ensure t
    :defer t
    :init
    (savehist-mode)
    )

#+END_SRC

*** Which-Key

#+begin_src elisp

  (use-package which-key
    :ensure t
    :init
    (which-key-mode)
    :config
    (which-key-setup-minibuffer)
    (setq which-key-show-early-on-C-h t)
    (setq which-key-idle-delay 10000)
    (setq which-key-idle-secondary-delay 0.05)
    :diminish which-key-mode
    )

#+end_src

** Diamond UI

*** All the icons

Diamond Emacs use all-the-icons to feel cool

#+BEGIN_SRC elisp

  (use-package all-the-icons
    :ensure t
    )

#+END_SRC

Diamond Emacs use icons for dired to simplify the viewing of files and folders

#+BEGIN_SRC elisp

  (use-package all-the-icons-dired
    :ensure t
    :defer t
    :hook
    (dired-mode . all-the-icons-dired-mode)
    )

#+END_SRC

*** Solaire Mode

#+BEGIN_SRC elisp

  (use-package solaire-mode
    :ensure t
    :defer t
    :hook (after-init . solaire-global-mode)
    )

#+END_SRC

*** Diamond Dashboard

#+BEGIN_SRC elisp

  (use-package dashboard
    :ensure t
    :init
    (add-hook 'dashboard-mode-hook (lambda () (setq show-trailing-whitespace nil)))
    (progn
      (setq dashboard-items '((recents . 8)
                              (projects . 5)
                              (bookmarks . 5)))
      (setq dashboard-center-content t)
      (setq dashboard-set-init-info t)
      (setq dashboard-set-file-icons t)
      (setq dashboard-set-heading-icons t)
      (setq dashboard-startup-banner "~/.emacs.d/etc/banner/snake.gif")
      (setq dashboard-banner-logo-title "[ D I A M O N D   E M A C S ]")
      (setq dashboard-set-navigator t)

      ;; Format: "(icon title help action face prefix suffix)"
      (setq dashboard-navigator-buttons
            `(;; line1
              ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                "Diamond Git"
                "Diamond homepage"
                (lambda (&rest _) (browse-url "https://github.com/MacPapo/Diamond-Emacs")))
               (,(all-the-icons-material "update" :height 1.1 :v-adjust -0.2)
                "Update"
                "Update Packages"
                (lambda (&rest _) (auto-package-update-now)))
               (,(all-the-icons-material "flag" :height 1.1 :v-adjust -0.2)
                "Report bug"
                "Report a bug"
                (lambda (&rest _) (browse-url "https://github.com/MacPapo/Diamond-Emacs/issues/new")))
               )
              ))

      (setq dashboard-footer-messages '("Vim! Ahahah, itâ€™s only one of the many Emacs modes!  CIT. Master of the Masters"))
      (setq dashboard-footer-icon (all-the-icons-octicon "flame"
                                                         :height 1.1
                                                         :v-adjust -0.02
                                                         :face 'font-lock-keyword-face))
      )
    :config
    (
     dashboard-setup-startup-hook)
    )

#+END_SRC

** Window Managing

*** Winum

Use winum to quickly change window by the number in the modeline

#+BEGIN_SRC elisp

  (use-package winum
    :ensure t
    :defer t
    :custom
    (winum-auto-setup-mode-line t)
    :config
    (winum-mode)
    :bind (
           ;; Select the window with Meta
           ("M-1" . winum-select-window-1)
           ("M-2" . winum-select-window-2)
           ("M-3" . winum-select-window-3)
           ("M-4" . winum-select-window-4)
           ("M-5" . winum-select-window-5)
           ("M-6" . winum-select-window-6))
    )

#+END_SRC

** Git integration

Magit Integration, the best Git interface

#+BEGIN_SRC elisp

  (use-package magit
    :commands magit-file-delete
    :ensure t
    :defer t
    :init
    (setq magit-auto-revert-mode nil)  ; we do this ourselves further down
    ;; Must be set early to prevent ~/.emacs.d/transient from being created
    :config
    (setq transient-default-level 5
          magit-diff-refine-hunk t ; show granular diffs in selected hunk
          ;; Don't autosave repo buffers. This is too magical, and saving can
          ;; trigger a bunch of unwanted side-effects, like save hooks and
          ;; formatters. Trust the user to know what they're doing.
          magit-save-repository-buffers nil
          ;; Don't display parent/related refs in commit buffers; they are rarely
          ;; helpful and only add to runtime costs.
          magit-revision-insert-related-refs nil)

    (add-hook 'magit-popup-mode-hook #'hide-mode-line-mode)

    :bind (("C-x g" . magit-status)
           ("C-x C-g" . magit-status))
    )

#+END_SRC

** Org Mode

Org Mode is one of the best feature of Emacs and Diamond Emacs want to create a perfect harmony between writing and visualizing content in Org files

*** Org Modern

Org Modern create a stunning UI look for Org files

#+BEGIN_SRC elisp

  (use-package org-modern
    :ensure t
    :config
    (global-org-modern-mode)
    )

#+END_SRC

*** Olivetti

Olivetti mode redefine the width of the screen and center the content in the middle, creating a typewriter feel

#+BEGIN_SRC elisp

  (use-package olivetti
    :ensure t
    :defer t
    :bind ("C-M-z" . olivetti-mode)
    )

#+END_SRC

** Terminals

*** VTerm

#+BEGIN_SRC elisp

  (use-package vterm
    :ensure t
    :defer t
    )

#+END_SRC

**** VTerm toggle

#+BEGIN_SRC elisp

  (use-package vterm-toggle
    :ensure t
    :defer t
    :bind
    ("C-c v" . vterm-toggle)
    )

#+END_SRC

*** ESHELL

ESHELL an Elisp Terminal for the love and life

**** ESHELL CONFIG

Some eshell improvements

#+BEGIN_SRC elisp

  (use-package eshell
    :ensure t
    :defer t
    :hook
    ;; (eshell-load . (lambda ()
    ;;                       (eshell-git-prompt-use-theme 'multiline2)))
    (eshell-mode . (lambda ()
                     (add-to-list 'eshell-visual-commands "rclone")
                     (add-to-list 'eshell-visual-commands "ssh")
                     (add-to-list 'eshell-visual-commands "tail")
                     (add-to-list 'eshell-visual-commands "top")
                     (eshell/alias "ff" "find-file $1")
                     (eshell/alias "emacs" "find-file $1")
                     (eshell/alias "untar" "tar -zxvf")
                     (eshell/alias "cpv" "rsync -ah --info=progress2")
                     (eshell/alias "ll" "ls -Alh")))
    :custom
    (eshell-error-if-no-glob t)
    (eshell-hist-ignoredups t)
    (eshell-save-history-on-exit t)
    (eshell-destroy-buffer-when-process-dies t)
    :config
    (setenv "PAGER" "cat")
    )

#+END_SRC

**** ESHELL TOGGLE

Toggle and eshell buffer with "C-c e"

#+BEGIN_SRC elisp

  (use-package eshell-toggle
      :ensure t
      :defer t
      :custom
      (eshell-toggle-size-fraction 3)
      (eshell-toggle-run-command nil)
      (eshell-toggle-init-function #'eshell-toggle-init-eshell)
      (eshell-toggle-window-side 'right)
      :bind
      ("C-c e" . eshell-toggle)
      )

#+END_SRC

** Mail Reader

Diamond Emacs can recive, sand and write emails thanks to mu4e

#+BEGIN_SRC elisp

  ;; (use-package mu4e
  ;;   :ensure nil
  ;;   :defer 5
  ;;   :load-path "/opt/homebrew/Cellar/mu/1.6.11/share/emacs/site-lisp/mu4e/"
  ;;   :config
  ;;   (setq mu4e-update-interval 300)            ; Update interval (seconds)
  ;;   (setq mu4e-index-cleanup t)                ; Cleanup after indexing
  ;;   (setq mu4e-maildir "~/Documents/Mails")
  ;;   (setq mu4e-attachment-dir "~/Downloads")
  ;;   (setq mu4e-index-update-error-warning t)   ; Warnings during update
  ;;   (setq mu4e-index-update-in-background t)   ; Background update
  ;;   (setq mu4e-change-filenames-when-moving t) ; Needed for mbsync
  ;;   (setq mu4e-get-mail-command "/opt/homebrew/bin/mbsync -a")
  ;;   (setq mu4e-index-lazy-check nil)           ; Don't be lazy, index everything
  ;;   (setq mu4e-confirm-quit nil)
  ;;   (setq mu4e-headers-include-related t)
  ;;   (setq mu4e-headers-skip-duplicates t)
  ;;   (setq mu4e-sent-folder "/uni/sent")
  ;;   (setq mu4e-trash-folder "/uni/trash")
  ;;   (setq mu4e-drafts-folder "/uni/drafts")
  ;;   (setq mu4e-maildir-shortcuts '(("/uni/inbox" . ?i)
  ;;                                  ("/uni/archive". ?a)
  ;;                                  ("/uni/sent" . ?s)))
  ;;   )

#+END_SRC

** PDF Tools

Diamond Emacs offer PDF Tools to interact with pdfs

#+BEGIN_SRC elisp

  (use-package pdf-tools
    :ensure t
    :defer t
    :magic ("%PDF" . pdf-view-mode)
    :config   (pdf-tools-install)
    (setq-default pdf-view-display-size 'fit-page)
    (setq pdf-view-use-scaling t
          pdf-view-use-imagemagick nil)
    )

#+END_SRC

*** Saveplace PDF view

Diamond Emacs remembers the location where you last stopped to read the pdf

#+BEGIN_SRC elisp

  (use-package saveplace-pdf-view
    :ensure t
    :defer t
    :after pdf-view)

#+END_SRC

** Programming/editing packages

*** Undo Tree

It allows you to recover any past state of a buffer

#+begin_src elisp

  (use-package undo-tree
    :ensure t
    :config
    (global-undo-tree-mode)
    (setq undo-tree-visualizer-parent-buffer t)
    )

#+end_src

*** Web Mode

It's an autonomous Diamond Emmacs major-mode for editing web templates.
HTML documents can embed parts (CSS / JavaScript) and blocks (client / server side).

#+begin_src elisp

  (use-package web-mode
    :ensure t
    :defer 1
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))

#+end_Src

*** Auto Complete

Auto-Complete is an intelligent auto-completion extension for Diamond Emacs. It extends the standard Emacs completion interface and provides an environment that allows users to concentrate more on their own work.

#+begin_src elisp

  ;; (use-package auto-complete
  ;;   :ensure t
  ;;   :defer 0.5
  ;;   :bind
  ;;   ("M-n" . ac-next)
  ;;   ("M-p" . ac-previous)
  ;;   :config
  ;;   (ac-config-default)
  ;;   (auto-complete-mode t)
  ;;   )

#+end_src

*** Company "Complete Anything"

Company is a text completion framework for Emacs

#+begin_src elisp

  (use-package company
    :ensure t
    :defer t
    :init (add-hook 'after-init-hook 'global-company-mode)
    :config
    (use-package company-irony :ensure t :defer t)
    (setq company-minimum-prefix-length 2
          company-idle-delay 0.3
          company-global-modes '(not eshell-mode)
          company-selection-wrap-around t
          company-abort-on-unique-match t)
    )

#+end_src

*** Origami

#+begin_src elisp

  (use-package origami
    :ensure t
    :defer t
    :bind (("C-c f f" . origami-toggle-node)
           ("C-c f a" . origami-toggle-all-nodes)
           ("C-c f s" . origami-show-only-node)
           ("C-c f p" . origami-previous-fold)
           ("C-c f n" . origami-forward-fold)
           )
    )

#+end_src

*** Multimarkdown processor

#+begin_src elisp

  (use-package markdown-mode
    :ensure t
    :defer 1
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown"))


  (use-package markdown-preview-mode
    :ensure t
    :defer 1
    :bind (("C-c m o" . markdown-preview-mode)))

#+end_src
